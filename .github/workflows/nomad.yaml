name: "Run performance tests on Nomad cluster"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 4" # Run Nomad workflow at 00:00 on Thursdays

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  run-scenarios:
    name: Run ${{ matrix.job-name || matrix.scenario-name }}
    runs-on: [self-hosted, wind-tunnel]
    strategy:
      max-parallel: 1
      fail-fast: false
      # `job-name` defaults to `scenario-name` if not provided.
      # `required-nodes` defaults to `1` if not provided.
      matrix:
        scenario-name:
          - first_call
          - local_signals
          - remote_call_rate
          - remote_signals
          - single_write_many_read
          - two_party_countersigning
          - write_query
          - write_read
          - write_validated
          - zome_call_single_value
        include:
          - job-name: app_install_large
            scenario-name: app_install

          - job-name: app_install_minimal
            scenario-name: app_install

          - scenario-name: dht_sync_lag
            required-nodes: 2

          - scenario-name: validation_receipts
            required-nodes: 2

          - scenario-name: write_validated_must_get_agent_activity
            required-nodes: 2
    steps:
      - uses: actions/checkout@v4

      - name: Bundle scenario
        run: |
          nix bundle .#packages.x86_64-linux.${{ matrix.scenario-name }}
          cp ./${{ matrix.scenario-name }}-arx ./${{ matrix.scenario-name }}

      - name: Build Nomad Job
        run: |
          nix develop --command ./nomad/generate_jobs.sh ${{ matrix.job-name || matrix.scenario-name }}

      - name: Upload bundle as artifact
        id: upload-bundle
        uses: actions/upload-artifact@v4
        with:
          path: ./${{ matrix.scenario-name }}
          name: ${{ matrix.job-name || matrix.scenario-name }}
          if-no-files-found: error

      - name: Wait for free nodes
        env:
          NIXPKGS_ALLOW_UNFREE: 1
          NOMAD_ADDR: https://nomad-server-01.holochain.org:4646
          NOMAD_CACERT: "${{ github.workspace }}/nomad/server-ca-cert.pem"
          NOMAD_TOKEN: ${{ secrets.NOMAD_ACCESS_TOKEN }}
        run: |
          echo "Waiting for ${{ matrix.required-nodes || 1 }} node(s) to be free"
          while true; do
              count=$(nix run --impure --inputs-from . nixpkgs#nomad -- node status -allocs | awk 'NR > 1 {if (($8 == "ready") && ($9 == 0)) count+=1} END {print count}')
              if (( ${count:-0} >= ${{ matrix.required-nodes || 1 }} )); then
                  break
              else
                  echo -n "."
              fi
              sleep 5
          done
          echo "done"

      - name: Get Download URL
        id: get-download-url
        run: |
          DOWNLOAD_URL=$(curl -Ls -o /dev/null -w %{url_effective} \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/holochain/wind-tunnel/actions/artifacts/${{ steps.upload-bundle.outputs.artifact-id}}/zip")
          echo "download-url=$DOWNLOAD_URL" >> "$GITHUB_OUTPUT"

      - name: Run Nomad Job
        id: run-nomad-job
        env:
          NIXPKGS_ALLOW_UNFREE: 1
          NOMAD_ADDR: https://nomad-server-01.holochain.org:4646
          NOMAD_CACERT: "${{ github.workspace }}/nomad/server-ca-cert.pem"
          NOMAD_TOKEN: ${{ secrets.NOMAD_ACCESS_TOKEN }}
          NOMAD_VAR_scenario-url: ${{ steps.get-download-url.outputs.download-url }}
          NOMAD_VAR_run-id: "${{ matrix.job-name || matrix.scenario-name }}_${{ github.run_id }}"
          RUN_ID: "${{ matrix.job-name || matrix.scenario-name }}_${{ github.run_id }}"
        run: |-
          set -euo pipefail
          nomad_output=$(nix run --impure --inputs-from . nixpkgs#nomad -- job run nomad/jobs/${{ matrix.job-name || matrix.scenario-name }}.nomad.hcl)
          echo "$nomad_output"
          echo "Ran ${{ matrix.job-name || matrix.scenario-name }} with run ID ${RUN_ID}" >> "$GITHUB_STEP_SUMMARY"
          alloc_ids=$(echo "$nomad_output" | grep -oP --color=never 'Allocation "\K[0-9a-f]+(?=" created)' | paste -sd ' ' -)
          if [ -z "$alloc_ids" ]; then
            echo "Failed to extract allocation IDs from Nomad job output"
            exit 1
          fi

          echo "alloc_ids=$alloc_ids" >> "$GITHUB_OUTPUT"

      - name: Save alloc_ids to file
        run: |
          for alloc_id in ${{ steps.run-nomad-job.outputs.alloc_ids }}; do
            echo "${{ matrix.job-name || matrix.scenario-name }},${alloc_id}" >> alloc_ids.csv
          done

      - uses: actions/upload-artifact@v4
        with:
          name: alloc_ids_${{ matrix.job-name || matrix.scenario-name }}
          path: alloc_ids.csv

  wait-for-all-jobs:
    name: Wait for all jobs to finish
    runs-on: [self-hosted, wind-tunnel]
    needs: run-scenarios
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: ./alloc_ids

      - name: Wait for all jobs
        env:
          NOMAD_ADDR: https://nomad-server-01.holochain.org:4646
          NOMAD_CACERT: "${{ github.workspace }}/nomad/server-ca-cert.pem"
          NOMAD_TOKEN: ${{ secrets.NOMAD_ACCESS_TOKEN }}
        run: |-
          cat ./alloc_ids/*/alloc_ids.csv > all_alloc_ids.csv
          while IFS= read -r line; do
            scenario_name=$(echo "$line" | cut -d',' -f1)
            alloc_id=$(echo "$line" | cut -d',' -f2)
            echo "Waiting for $scenario_name with allocation ID $alloc_id"
            nix develop --command ./nomad/wait_for_jobs.sh $scenario_name $alloc_id
          done < all_alloc_ids.csv
