name: "test"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Maximize build space
        if: runner.os == 'Linux'
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Install nix
        uses: cachix/install-nix-action@v31
        with:
          install_url: https://releases.nixos.org/nix/nix-2.28.3/install
          extra_nix_config: |
            accept-flake-config = true

      - uses: cachix/cachix-action@v16
        with:
          name: holochain-ci
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - uses: Swatinem/rust-cache@v2

      # We do a custom build of Holochain in the CI shell which can take up a lot of
      # disk space. We want to build and cache this early in the workflow so that if we
      # do run out of disk space, then at least we've captured that big piece in the
      # cache and can just download it next time.
      - name: Cache CI shell
        env:
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
        run: |
          nix develop --profile ci-profile -c true
          cachix push holochain-ci ci-profile

          echo "==> Available space after step"
          echo
          df -h

      - name: Check formatting
        run: |
          nix flake check --all-systems

          echo "==> Available space after step"
          echo
          df -h

      - name: Verify go cli tool
        run: |
          nix run .#check-go

          echo "==> Available space after step"
          echo
          df -h

      - name: Lint Rust
        run: |
          nix run .#check-rust-lint

          echo "==> Available space after step"
          echo
          df -h

      - name: Run unit tests
        run: |
          nix run .#rust-unit-tests

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - zome_call_single_value
        run: |
          nix run .#rust-smoke-test -- --package zome_call_single_value -- --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - single_write_many_read
        run: |
          nix run .#rust-smoke-test -- --package single_write_many_read -- --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - dht_sync_lag
        run: |
          nix run .#rust-smoke-test -- --package dht_sync_lag -- --agents 2 --behaviour write:1 --behaviour record_lag:1 --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - app_install
        run: |
          nix run .#rust-smoke-test -- --package app_install -- --agents 2 --behaviour minimal:1 --behaviour large:1 --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - first_call
        run: |
          nix run .#rust-smoke-test -- --package first_call -- --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - write_read
        run: |
          nix run .#rust-smoke-test -- --package write_read -- --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - write_query
        run: |
          nix run .#rust-smoke-test -- --package write_query -- --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - local_signals
        run: |
          nix run .#rust-smoke-test -- --package local_signals -- --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - write_validated
        run: |
          nix run .#rust-smoke-test -- --package write_validated -- --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - remote_call_rate
        run: |
          MIN_AGENTS=2 nix run .#rust-smoke-test -- --package remote_call_rate -- --agents 2 --duration 30 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - two_party_countersigning
        run: |
          MIN_AGENTS=2 nix run .#rust-smoke-test -- --package two_party_countersigning -- --agents 2 --behaviour initiate:1 --behaviour participate:1 --duration 30

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - validation_receipts
        run: |
          set -x

          MIN_AGENTS=2 nix run .#rust-smoke-test -- --package validation_receipts -- --duration 45 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - remote_signals
        run: |
          MIN_AGENTS=2 nix run .#rust-smoke-test -- --package remote_signals -- --agents 2 --duration 30 --no-progress

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - kitsune_continuous_flow
        run: |
          set -x

          kitsune_host="127.0.0.1:30000"

          # Start local bootstrap and signal server
          nix develop .#kitsune -c bash -c "kitsune2-bootstrap-srv --listen $kitsune_host &"

          # Run the scenario
          nix run .#rust-smoke-test -- --package kitsune_continuous_flow -- --bootstrap-server-url "http://$kitsune_host" --signal-server-url "ws://$kitsune_host" --duration 15 --agents 2

          # Stop servers
          pkill kitsune2-bootstrap-srv || true

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - write_get_agent_activity
        run: |
          # Start a sandbox conductor and run it in the background
          nix develop .#ci -c bash -c "hc s clean && echo "1234" | hc s --piped create && echo "1234" | hc s --piped -f 8888 run &"

          nix develop .#ci --command bash ./scripts/wait-for-hc.sh

          # Run the scenario
          RUST_LOG=info MIN_AGENTS=2 cargo run --package write_get_agent_activity -- --connection-string ws://localhost:8888 --agents 2 --behaviour write:1 --behaviour get_agent_activity:1 --duration 5 --no-progress

          # Stop sandbox conductor
          pkill hc && pkill holochain && pkill lair-keystore

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - write_validated_must_get_agent_activity
        run: |
          # Start a sandbox conductor and run it in the background
          nix develop .#ci -c bash -c "hc s clean && echo "1234" | hc s --piped create && echo "1234" | hc s --piped -f 8888 run &"

          nix develop .#ci --command bash ./scripts/wait-for-hc.sh

          # Run the scenario
          RUST_LOG=warn MIN_AGENTS=2 cargo run --package write_validated_must_get_agent_activity -- --connection-string ws://localhost:8888 --agents 2 --behaviour write:1 --behaviour must_get_agent_activity:1 --duration 30 --no-progress

          # Stop sandbox conductor
          pkill hc && pkill holochain && pkill lair-keystore

          echo "==> Available space after step"
          echo
          df -h

      - name: Smoke test - zero_arc_create_data
        run: |
          nix run .#rust-smoke-test -- --package zero_arc_create_data -- --agents 2 --behaviour zero:1 --behaviour full:1 --duration 5 --no-progress

          echo "==> Available space after step"
          echo
          df -h

  archive_bundles:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Maximize build space
        if: runner.os == 'Linux'
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Install nix
        uses: cachix/install-nix-action@v31
        with:
          install_url: https://releases.nixos.org/nix/nix-2.28.3/install
          extra_nix_config: |
            accept-flake-config = true

      - uses: cachix/cachix-action@v16
        with:
          name: holochain-ci
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build scenario bundles
        if: runner.os == 'Linux'
        run: |
          set -euxo pipefail

          scenario_names() {
            find scenarios/ -mindepth 1 -maxdepth 1 -type d -printf "%f\n"
          }

          scenario_names | xargs -I % nix bundle .#packages.x86_64-linux.%

          mkdir -p dist
          scenario_names | xargs -I % cp %-arx dist/%

          echo "==> Available space after step"
          echo
          df -h

      - name: Archive scenario bundles
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v5
        with:
          name: scenario-bundles
          if-no-files-found: error
          path: dist/*

  changelog-preview-comment:
    if: github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'hra-release') && github.actor != 'dependabot[bot]'
    name: Add comment of changelog preview
    uses: holochain/actions/.github/workflows/changelog-preview-comment.yml@v1.3.0

  ci_pass:
    if: ${{ always() }}
    runs-on: "ubuntu-latest"
    needs:
      - test
      - archive_bundles
    steps:
      - name: check status
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
