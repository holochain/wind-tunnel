use std::{fmt::Debug, sync::Arc};
use wind_tunnel_instruments::Reporter;

use crate::{
    executor::Executor,
    shutdown::{DelegatedShutdownListener, ShutdownHandle},
};

pub trait UserValuesConstraint: Default + Debug + Send + Sync + 'static {}

#[derive(Debug)]
pub struct RunnerContext<RV: UserValuesConstraint> {
    executor: Arc<Executor>,
    reporter: Arc<Reporter>,
    shutdown_handle: ShutdownHandle,
    /// Connection string for the service to test, supplied by the user via the CLI.
    connection_string: String,
    value: RV,
}

impl<RV: UserValuesConstraint> RunnerContext<RV> {
    pub(crate) fn new(
        executor: Arc<Executor>,
        reporter: Arc<Reporter>,
        shutdown_handle: ShutdownHandle,
        connection_string: String,
    ) -> Self {
        Self {
            executor,
            reporter,
            shutdown_handle,
            connection_string,
            value: Default::default(),
        }
    }

    pub fn executor(&self) -> &Arc<Executor> {
        &self.executor
    }

    pub fn reporter(&self) -> Arc<Reporter> {
        self.reporter.clone()
    }

    /// Get a new shutdown listener that will be triggered when the runner is shutdown.
    ///
    /// This is provided in case you are doing something unexpected and need to hook into the shutdown process.
    /// In general, please consider using [Executor::execute_in_place] which automatically handles shutdown.
    pub fn new_shutdown_listener(&self) -> DelegatedShutdownListener {
        self.shutdown_handle.new_listener()
    }

    pub fn get_connection_string(&self) -> &str {
        &self.connection_string
    }

    pub fn get_mut(&mut self) -> &mut RV {
        &mut self.value
    }

    pub fn get(&self) -> &RV {
        &self.value
    }
}

pub struct AgentContext<RV: UserValuesConstraint, V: UserValuesConstraint> {
    agent_id: String,
    runner_context: Arc<RunnerContext<RV>>,
    shutdown_listener: DelegatedShutdownListener,
    value: V,
}

impl<RV: UserValuesConstraint, V: UserValuesConstraint> AgentContext<RV, V> {
    pub(crate) fn new(
        agent_id: String,
        runner_context: Arc<RunnerContext<RV>>,
        shutdown_listener: DelegatedShutdownListener,
    ) -> Self {
        Self {
            agent_id,
            runner_context,
            shutdown_listener,
            value: Default::default(),
        }
    }

    /// A value generated by the runner that you can use to identify yourself making requests.
    ///
    /// This value is unique within the runner but it is *not* unique across multiple runners.
    pub fn agent_id(&self) -> &str {
        &self.agent_id
    }

    pub fn runner_context(&self) -> &Arc<RunnerContext<RV>> {
        &self.runner_context
    }

    /// Get the shutdown listener which will be triggered when the runner is shutdown.
    ///
    /// This is provided in case you are doing something unexpected and need to hook into the shutdown process.
    /// In general, please consider using [Executor::execute_in_place] which automatically handles shutdown.
    pub fn shutdown_listener(&mut self) -> &mut DelegatedShutdownListener {
        &mut self.shutdown_listener
    }

    pub fn get_mut(&mut self) -> &mut V {
        &mut self.value
    }

    pub fn get(&self) -> &V {
        &self.value
    }
}
