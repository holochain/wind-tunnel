[
  {
    "apiVersion": "influxdata.com/v2alpha1",
    "kind": "Dashboard",
    "metadata": { "name": "spectacular-wu-6f4001" },
    "spec": {
      "charts": [
        {
          "height": 1,
          "kind": "Markdown",
          "name": "Name this Cell",
          "note": "This dashboard gives you an overview of Linux System metrics. See the [Telegraf Documentation](https://v2.docs.influxdata.com/v2.0/reference/telegraf-plugins/) for help configuring these plugins.",
          "staticLegend": {},
          "width": 12
        },
        {
          "colors": [{ "name": "laser", "type": "text", "hex": "#00C9FF" }],
          "height": 1,
          "kind": "Single_Stat",
          "name": "System Uptime",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"system\")\n  |> filter(fn: (r) => r._field == \"uptime\")\n  |> last()\n  |> map(fn: (r) => ({ _value: float(v: r._value) / 86400.00 }))"
            }
          ],
          "staticLegend": {},
          "suffix": " days",
          "width": 3,
          "yPos": 1
        },
        {
          "axes": [
            { "base": "10", "name": "x", "scale": "linear" },
            { "base": "10", "name": "y", "scale": "linear", "suffix": "%" },
            { "base": "10", "name": "y2", "scale": "linear" }
          ],
          "geom": "line",
          "height": 3,
          "kind": "Xy",
          "name": "Disk Usage",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"disk\")\n  |> filter(fn: (r) => r._field == \"used_percent\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
            }
          ],
          "staticLegend": {},
          "width": 3,
          "yPos": 2
        },
        {
          "axes": [
            { "base": "10", "name": "x", "scale": "linear" },
            { "base": "2", "label": "Bytes", "name": "y", "scale": "linear" },
            { "base": "10", "name": "y2", "scale": "linear" }
          ],
          "geom": "line",
          "height": 3,
          "kind": "Xy",
          "name": "Disk IO",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"diskio\")\n  |> filter(fn: (r) => r._field == \"read_bytes\" or r._field == \"write_bytes\")\n  |> derivative(unit: v.windowPeriod, nonNegative: false)"
            }
          ],
          "staticLegend": {},
          "width": 3,
          "yPos": 5
        },
        {
          "colors": [{ "name": "laser", "type": "text", "hex": "#00C9FF" }],
          "decimalPlaces": 2,
          "height": 1,
          "kind": "Single_Stat",
          "name": "nCPUs",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"system\")\n  |> filter(fn: (r) => r._field == \"n_cpus\")\n  |> last()"
            }
          ],
          "staticLegend": {},
          "suffix": " cpus",
          "width": 2,
          "xPos": 3,
          "yPos": 1
        },
        {
          "axes": [
            { "base": "10", "name": "x", "scale": "linear" },
            { "base": "10", "name": "y", "scale": "linear", "suffix": "%" },
            { "base": "10", "name": "y2", "scale": "linear" }
          ],
          "geom": "line",
          "height": 3,
          "kind": "Xy",
          "name": "CPU Usage",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"cpu\")\n  |> filter(fn: (r) => r._field == \"usage_user\" or r._field == \"usage_system\" or r._field == \"usage_idle\")\n  |> filter(fn: (r) => r.cpu == \"cpu-total\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
            }
          ],
          "staticLegend": {},
          "width": 3,
          "xPos": 3,
          "yPos": 2
        },
        {
          "axes": [
            { "base": "10", "name": "x", "scale": "linear" },
            { "base": "2", "label": "Bytes", "name": "y", "scale": "linear" },
            { "base": "10", "name": "y2", "scale": "linear" }
          ],
          "geom": "line",
          "height": 3,
          "kind": "Xy",
          "name": "Network",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"net\")\n  |> filter(fn: (r) => r._field == \"bytes_recv\" or r._field == \"bytes_sent\")\n  |> derivative(unit: v.windowPeriod, nonNegative: false)"
            }
          ],
          "staticLegend": {},
          "width": 3,
          "xCol": "_time",
          "xPos": 3,
          "yCol": "_value",
          "yPos": 5
        },
        {
          "colors": [{ "name": "laser", "type": "text", "hex": "#00C9FF" }],
          "decimalPlaces": 2,
          "height": 1,
          "kind": "Single_Stat",
          "name": "System Load",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"system\")\n  |> filter(fn: (r) => r._field == \"load1\")\n  |> last()"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "xPos": 5,
          "yPos": 1
        },
        {
          "axes": [
            { "base": "10", "name": "x", "scale": "linear" },
            { "base": "10", "label": "Load", "name": "y", "scale": "linear" },
            { "base": "10", "name": "y2", "scale": "linear" }
          ],
          "geom": "line",
          "height": 3,
          "kind": "Xy",
          "name": "System Load",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"system\")\n  |> filter(fn: (r) => r._field == \"load1\" or r._field == \"load5\" or r._field == \"load15\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
            }
          ],
          "staticLegend": {},
          "width": 3,
          "xPos": 6,
          "yPos": 2
        },
        {
          "axes": [
            { "base": "10", "name": "x", "scale": "linear" },
            { "base": "10", "name": "y", "scale": "linear" },
            { "base": "10", "name": "y2", "scale": "linear" }
          ],
          "geom": "line",
          "height": 3,
          "kind": "Xy",
          "name": "Processes",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"processes\")\n  |> filter(fn: (r) => r._field == \"running\" or r._field == \"blocked\" or r._field == \"idle\" or r._field == \"unknown\")\n  |> aggregateWindow(every: v.windowPeriod, fn: max)"
            }
          ],
          "staticLegend": {},
          "width": 3,
          "xPos": 6,
          "yPos": 5
        },
        {
          "colors": [{ "name": "laser", "type": "text", "hex": "#00C9FF" }],
          "decimalPlaces": 2,
          "height": 1,
          "kind": "Single_Stat",
          "name": "Total Memory",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"mem\")  \n  |> filter(fn: (r) => r._field == \"total\")\n  |> last()  \n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1024.0 / 1024.0 / 1024.0}))"
            }
          ],
          "staticLegend": {},
          "suffix": " GB",
          "width": 2,
          "xPos": 7,
          "yPos": 1
        },
        {
          "axes": [
            { "base": "10", "name": "x", "scale": "linear" },
            { "base": "10", "name": "y", "scale": "linear", "suffix": "%" },
            { "base": "10", "name": "y2", "scale": "linear" }
          ],
          "colors": [
            { "name": "laser", "type": "text", "hex": "#00C9FF" },
            {
              "name": "Do Androids Dream of Electric Sheep?",
              "type": "scale",
              "hex": "#8F8AF4"
            },
            {
              "name": "Do Androids Dream of Electric Sheep?",
              "type": "scale",
              "hex": "#A51414"
            },
            {
              "name": "Do Androids Dream of Electric Sheep?",
              "type": "scale",
              "hex": "#F4CF31"
            }
          ],
          "decimalPlaces": 1,
          "height": 4,
          "kind": "Single_Stat_Plus_Line",
          "name": "Memory Usage",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"mem\")\n  |> filter(fn: (r) => r._field == \"used_percent\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
            }
          ],
          "staticLegend": {},
          "suffix": "%",
          "width": 3,
          "xPos": 9,
          "yPos": 1
        },
        {
          "axes": [
            { "base": "10", "name": "x", "scale": "linear" },
            { "base": "2", "name": "y", "scale": "linear" },
            { "base": "10", "name": "y2", "scale": "linear" }
          ],
          "geom": "line",
          "height": 3,
          "kind": "Xy",
          "name": "Swap",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"swap\")\n  |> filter(fn: (r) => r._field == \"total\" or r._field == \"used\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
            }
          ],
          "staticLegend": {},
          "width": 3,
          "xPos": 9,
          "yPos": 5
        }
      ],
      "description": "Metrics for Host system",
      "name": "Host"
    }
  }
]
