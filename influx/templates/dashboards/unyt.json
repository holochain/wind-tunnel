[
  {
    "apiVersion": "influxdata.com/v2alpha1",
    "kind": "Dashboard",
    "metadata": { "name": "alerting-khorana-692001" },
    "spec": {
      "charts": [
        { "height": 2, "kind": "Markdown", "name": "Name this Cell", "note": "## Summary ", "staticLegend": {}, "width": 2 },
        {
          "height": 1,
          "kind": "Markdown",
          "name": "Name this Cell",
          "note": "## Summary for Test run",
          "staticLegend": {},
          "width": 12,
          "yPos": 2
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF" }
          ],
          "height": 4,
          "kind": "XY",
          "name": "Final Ledger Balance by Run ID",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.ledger_state\")\n  |> filter(fn: (r) => r._field == \"ledger_balance\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> group(columns: [\"run_id\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 6,
          "xPos": 0,
          "yPos": 15
        },
        {
          "colors": [
            { "id": "0", "name": "rainforest", "type": "min", "hex": "#32B08C" },
            { "id": "1", "name": "fire", "type": "max", "hex": "#F95F53" }
          ],
          "height": 4,
          "kind": "XY",
          "name": "Completed Transactions by Run ID",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.completed_transactions\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> group(columns: [\"run_id\", \"_field\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> yield(name: \"sum\")"
            }
          ],
          "staticLegend": {},
          "width": 6,
          "xPos": 6,
          "yPos": 15
        },
        {
          "colors": [
            { "id": "0", "name": "ocean", "type": "min", "hex": "#31C0F6" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF" }
          ],
          "height": 4,
          "kind": "XY",
          "name": "Actionable Transactions by Run ID",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.actionable_transactions\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> group(columns: [\"run_id\", \"_field\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> yield(name: \"sum\")"
            }
          ],
          "staticLegend": {},
          "width": 6,
          "xPos": 0,
          "yPos": 7
        },
        {
          "colors": [
            { "id": "0", "name": "fire", "type": "min", "hex": "#F95F53" },
            { "id": "1", "name": "laser", "type": "max", "hex": "#00C9FF" }
          ],
          "height": 4,
          "kind": "XY",
          "name": "Parked Spends & Executed Agreements by Run ID",
          "queries": [
            {
              "query": "parked = from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.parked_spends\")\n  |> filter(fn: (r) => r._field == \"parked_spends\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> group(columns: [\"run_id\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> map(fn: (r) => ({ r with _field: \"parked_spends\" }))\n\nexecuted = from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.executed_agreements\")\n  |> filter(fn: (r) => r._field == \"number\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> group(columns: [\"run_id\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> map(fn: (r) => ({ r with _field: \"executed_agreements\" }))\n\nunion(tables: [parked, executed])\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 6,
          "xPos": 6,
          "yPos": 7
        },
        {
          "colors": [{ "id": "base", "name": "white", "type": "text", "hex": "#ffffff" }],
          "height": 4,
          "kind": "Table",
          "name": "Test Run Summary Table",
          "queries": [
            {
              "query": "ledger = from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.ledger_state\")\n  |> filter(fn: (r) => r._field == \"ledger_balance\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> group(columns: [\"run_id\"])\n  |> sum()\n  |> map(fn: (r) => ({ r with _field: \"total_ledger_balance\" }))\n\ncompleted = from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.completed_transactions\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> group(columns: [\"run_id\"])\n  |> sum()\n  |> map(fn: (r) => ({ r with _field: \"total_completed_tx\" }))\n\nactionable = from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.actionable_transactions\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> group(columns: [\"run_id\"])\n  |> sum()\n  |> map(fn: (r) => ({ r with _field: \"total_actionable_tx\" }))\n\nunion(tables: [ledger, completed, actionable])\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> yield(name: \"summary\")"
            }
          ],
          "staticLegend": {},
          "tableOptions": { "verticalTimeAxis": true },
          "timeFormat": "YYYY-MM-DD HH:mm:ss",
          "width": 12,
          "xPos": 0,
          "yPos": 11
        },
        {
          "colors": [{ "id": "base", "name": "laser", "type": "text", "hex": "#00C9FF" }],
          "decimalPlaces": 2,
          "height": 2,
          "kind": "Single_Stat",
          "name": "Total Agents (cloned at 2025-08-14 16:42:21)",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.ledger_state\")\n  |> filter(fn: (r) => r._field == \"ledger_balance\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> filter(fn: (r) => r.run_id == v.RunId)\n  |> group(columns: [\"agent\"])     // Group by agent (creates separate table per agent)\n  |> count()                       // Count records in each agent group (will be 1+ per agent)\n  |> group()                       // Ungroup all tables back together\n  |> count()                       // Count the number of groups (= number of unique agents)"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "yPos": 15
        },
        {
          "height": 1,
          "kind": "Markdown",
          "name": "Name this Cell",
          "note": "## Zome Call",
          "staticLegend": {},
          "width": 12,
          "yPos": 17
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 2 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "get_ledger",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"get_ledger\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "yPos": 18
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 2 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "get_parked_spend",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"get_parked_spend\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "yPos": 20
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 2 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "get_actionable_transaction",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"get_actionable_transactions\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "yPos": 22
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 2 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "get_my_current_applied_credit_limit",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"get_my_current_applied_credit_limit\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "yPos": 24
        },
        {
          "colors": [{ "id": "base", "name": "laser", "type": "text", "hex": "#00C9FF" }],
          "decimalPlaces": 2,
          "height": 2,
          "kind": "Single_Stat",
          "name": "Average time for global def to be viewed on start-up",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"at\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "suffix": "s",
          "width": 3,
          "xPos": 2
        },
        {
          "colors": [{ "name": "rainforest", "type": "text", "hex": "#32B08C" }],
          "height": 2,
          "kind": "Single_Stat",
          "name": "Network Init Time",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"wt.custom.global_definition_propagation_time\")\n  |> filter(fn: (r) => r._field == \"at\")\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> filter(fn: (r) => r.run_id == v.RunId)\n  |> mean()"
            }
          ],
          "staticLegend": {},
          "suffix": "s",
          "width": 2,
          "xPos": 2,
          "yPos": 15
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 5 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "create_spend",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"create_spend\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "xPos": 2,
          "yPos": 18
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 5 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "accept_transaction",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"accept_transaction\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "xPos": 2,
          "yPos": 20
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 5 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "create_code_template",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"create_code_template\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "xPos": 2,
          "yPos": 22
        },
        {
          "colors": [{ "name": "ocean", "type": "text", "hex": "#31C0F6" }],
          "height": 2,
          "kind": "Single_Stat",
          "name": "Total Zome Calls",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> filter(fn: (r) => r.run_id == v.RunId)\n  |> filter(fn: (r) => r._field == \"value\")\n  |> filter(fn: (r) => r._measurement == \"wt.instruments.operation_duration\")\n  |> count()"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "xPos": 4,
          "yPos": 15
        },
        {
          "colors": [{ "id": "base", "name": "white", "type": "text", "hex": "#ffffff" }],
          "height": 2,
          "kind": "Table",
          "name": "Name this Cell",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"wt.custom.final:history\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "tableOptions": { "verticalTimeAxis": true },
          "timeFormat": "YYYY-MM-DD HH:mm:ss",
          "width": 2,
          "xPos": 6
        },
        {
          "colors": [{ "name": "fire", "type": "text", "hex": "#F95F53" }],
          "height": 2,
          "kind": "Single_Stat",
          "name": "Average Zome Call Duration",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> filter(fn: (r) => r.run_id == v.RunId)\n  |> filter(fn: (r) => r._field == \"value\")\n  |> filter(fn: (r) => r._measurement == \"wt.instruments.operation_duration\")\n  |> filter(fn: (r) => r.operation_id !~ /^admin/)\n  |> mean()"
            }
          ],
          "staticLegend": {},
          "suffix": "s",
          "width": 2,
          "xPos": 6,
          "yPos": 15
        },
        {
          "colors": [{ "name": "rainforest", "type": "text", "hex": "#32B08C" }],
          "height": 2,
          "kind": "Single_Stat",
          "name": "Average Admin Call Duration",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r.scenario_name == \"unyt\")\n  |> filter(fn: (r) => r.run_id == v.RunId)\n  |> filter(fn: (r) => r._field == \"value\")\n  |> filter(fn: (r) => r._measurement == \"wt.instruments.operation_duration\")\n  |> filter(fn: (r) => r.operation_id =~ /^admin/)\n  |> mean()"
            }
          ],
          "staticLegend": {},
          "suffix": "s",
          "width": 2,
          "xPos": 8,
          "yPos": 15
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 2 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "init",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"init\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "xPos": 10,
          "yPos": 18
        },
        {
          "colors": [
            { "id": "0", "name": "laser", "type": "min", "hex": "#00C9FF" },
            { "id": "1", "name": "comet", "type": "max", "hex": "#9394FF", "value": 2 }
          ],
          "decimalPlaces": 4,
          "height": 2,
          "kind": "Gauge",
          "name": "initialize_global_definition",
          "queries": [
            {
              "query": "from(bucket: \"windtunnel\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"scenario_name\"] == \"unyt\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"fn_name\"] == \"initialize_global_definition\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {},
          "width": 2,
          "xPos": 10,
          "yPos": 20
        }
      ],
      "name": "Unyt"
    }
  }
]
